/*-------------------------
  transport position
 */
.transport {
  position: absolute;
  right: 0;
}

.lane {
  position: relative;
  height: $avenueWidth/4;
  &:nth-of-type(2n+1) {
    .transport {
      right: 0;
    }
  }

  &:nth-of-type(2n) {
    .transport {
      left: 0;
    }
  }
}


/*-------------------------
  car mixin
 */
@mixin carBodyBase() {
  width: $carWidth;
  height: $carHeight;

  transform: translateZ($carDepth);
  transform-style: preserve-3d;

  &:before {
    @include pseudoElementBase;
    @include leftBend90deg($shortSideDepth, $carHeight);
  }

  &:after {
    @include pseudoElementBase;
    @include bottomBend90deg($carWidth, $carDepth);
  }
}
@mixin carColorSideBase($bodycolor) {
  $bumperColor: darken($bodycolor, 8%);
  &:after {
    $bottomSideColor: darken($bodycolor, 5%);
    background-image:
      // tire
      // frame
      // frame
      // frame
      // body
      radial-gradient(circle closest-side at center,
        $carTireColor 100%, transparent 100%
      ),
      linear-gradient(to bottom,
        $bottomSideColor, $bottomSideColor
      ),
      linear-gradient(to bottom,
        $bottomSideColor, $bottomSideColor
      ),
      linear-gradient(to bottom,
        $bottomSideColor, $bottomSideColor
      ),
      linear-gradient(to bottom,
        $bottomSideColor   $shortSideDepth * 0.1,
        $carWindowColor    $shortSideDepth * 0.1, $carWindowColor    $shortSideDepth * 0.6,
        $bottomSideColor   $shortSideDepth * 0.6, $bottomSideColor   $shortSideDepth * 0.8,
        $bumperColor       $shortSideDepth * 0.8, $bumperColor       $shortSideDepth,
        transparent        $shortSideDepth,       transparent
      );

    background-size:
      $carWidth*0.5  $carDepth*0.3,
      $carWidth*0.1  $carDepth*0.6,
      $carWidth*0.1  $carDepth*0.6,
      $carWidth*0.1  $carDepth*0.6,
      auto auto;
    background-position:
      0 $carDepth/3*2+$carDepth/30,
      left top,
      center top,
      right top,
      0 0;
    background-repeat:
      repeat-x,
      no-repeat,
      no-repeat,
      no-repeat,
      no-repeat;
  }
}

@mixin carColorFrontBase($bodycolor) {
  background-color: $bodycolor;
  $bumperColor: darken($bodycolor, 8%);

  &:before {
    $frontSideColor: darken($bodycolor, 3%);
    background-color: transparent;
    background-image:
      // number plate
      // bumper
      // frame
      // body
      linear-gradient(to left,
        $carNumberPlateColor, $carNumberPlateColor
      ),
      linear-gradient(to left,
        transparent, transparent  $shortSideDepth * 0.8,
        $bumperColor  $shortSideDepth * 0.8
      ),
      linear-gradient(to bottom,
        $frontSideColor,                  $frontSideColor $carHeight * 0.1,
        transparent    $carHeight * 0.1, transparent    $carHeight * 0.9,
        $frontSideColor $carHeight * 0.9, $frontSideColor
      ),
      linear-gradient(to left,
        $frontSideColor   $shortSideDepth * 0.1,
        $carWindowColor  $shortSideDepth * 0.1, $carWindowColor $shortSideDepth * 0.6,
        $frontSideColor   $shortSideDepth * 0.6, $frontSideColor
      );
    background-repeat: no-repeat;
    background-size:
      $carHeight*0.1 $carHeight*0.5,
      auto,
      auto,
      auto;
    background-position:
      left center,
      0,
      0,
      0;
  }
}

@mixin carColorBackBase($bodycolor) {
  background-color: $bodycolor;
  $bumperColor: darken($bodycolor, 8%);

  &:before {
    $backSideColor: darken($bodycolor, 8%);
    background-color: transparent;
    background-image:
      // number plate
      // bumper
      // frame
      // body
      linear-gradient(to left,
        darken($carNumberPlateColor, 30%), darken($carNumberPlateColor, 30%)
      ),
      linear-gradient(to left,
        transparent, transparent  $shortSideDepth * 0.8,
        transparent  $shortSideDepth * 0.8
      ),
      linear-gradient(to bottom,
        $backSideColor,                  $backSideColor $carHeight * 0.1,
        transparent    $carHeight * 0.1, transparent    $carHeight * 0.9,
        $backSideColor $carHeight * 0.9, $backSideColor
      ),
      linear-gradient(to left,
        $backSideColor   $shortSideDepth * 0.1,
        darken($carWindowColor, 10%)  $shortSideDepth * 0.1, darken($carWindowColor, 10%) $shortSideDepth * 0.4,
        $backSideColor   $shortSideDepth * 0.4, $backSideColor
      );
    background-repeat: no-repeat;
    background-size:
      $carHeight*0.1 $carHeight*0.5,
      auto,
      auto,
      auto;
    background-position:
      left center,
      0,
      0,
      0;
  }
}

/*-------------------------
  car
 */
.car {
  @include carBodyBase();
  @include carColorFrontBase($carRedColor);

  &.red {
    @include carColorSideBase($carRedColor);
    @include carColorFrontBase($carRedColor);
  }

  &.blue {
    @include carColorSideBase($carBlueColor);
    @include carColorFrontBase($carBlueColor);
  }
}

// position
.lane {
  &:nth-of-type(2n) {
    .car.red {
      @include carColorBackBase($carRedColor);
    }
    .car.blue {
      @include carColorBackBase($carBlueColor);
    }
  }
}

// animation
@mixin carAnimationBase {
  animation-duration: $carAverageSpeed;
  animation-direction: normal;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
}

@keyframes transportCarMovingOnAvenueToLeft {
  $smooth: $carDepth;
  $carBounce: $carDepth + $carDepth*0.07;

  0% {
    right: 0;
  }
  10% {
    transform: translateZ($smooth);
  }
  10.5% {
    transform: translateZ($carBounce);
  }
  11% {
    transform: translateZ($smooth);
  }
  30% {
    transform: translateZ($smooth);
  }
  30.5% {
    transform: translateZ($carBounce);
  }
  31% {
    transform: translateZ($smooth);
  }
  50% {
    transform: translateZ($smooth);
  }
  50.5% {
    transform: translateZ($carBounce);
  }
  51% {
    transform: translateZ($smooth);
  }
  70% {
    transform: translateZ($smooth);
  }
  70.5% {
    transform: translateZ($carBounce);
  }
  71% {
    transform: translateZ($smooth);
  }
  90% {
    transform: translateZ($smooth);
  }
  90.5% {
    transform: translateZ($carBounce);
  }
  91% {
    transform: translateZ($smooth);
  }
  100% {
    right: calc(100% - #{$carWidth});
  }
}

@keyframes transportCarMovingOnAvenueToRight {
  $smooth: $carDepth;
  $carBounce: $carDepth + $carDepth*0.07;

  0% {
    left: 0;
  }
  20% {
    transform: translateZ($smooth);
  }
  20.5% {
    transform: translateZ($carBounce);
  }
  21% {
    transform: translateZ($smooth);
  }
  40% {
    transform: translateZ($smooth);
  }
  40.5% {
    transform: translateZ($carBounce);
  }
  41% {
    transform: translateZ($smooth);
  }
  60% {
    transform: translateZ($smooth);
  }
  60.5% {
    transform: translateZ($carBounce);
  }
  61% {
    transform: translateZ($smooth);
  }
  80% {
    transform: translateZ($smooth);
  }
  80.5% {
    transform: translateZ($carBounce);
  }
  81% {
    transform: translateZ($smooth);
  }
  100% {
    left: calc(100% - #{$carWidth});
  }
}

.car.run {
  @include carAnimationBase;
  animation-name: transportCarMovingOnAvenueToLeft;
}

.lane {
  &:nth-of-type(2n) {
    .car.run {
      animation-name: transportCarMovingOnAvenueToRight;
    }
  }
  &:nth-of-type(2n + 1) {
    .car.run {
      animation-name: transportCarMovingOnAvenueToLeft;
    }
  }
}

.car.run.slow {
  animation-duration: $carAverageSpeed * 1.3;
}

.car.run.fast {
  animation-duration: $carAverageSpeed * 0.7;
}